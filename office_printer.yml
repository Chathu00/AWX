- name: Reusable Office Printer Setup with Clean Output and Stuck Job Handling
  hosts: windows_host
  gather_facts: no

  vars_prompt:
    - name: "printer_name"
      prompt: "Enter the printer name"
      private: no

    - name: "printer_ip"
      prompt: "Enter the printer IP address"
      private: no

    - name: "printer_driver_name"
      prompt: "Enter the printer driver name (default: Microsoft Print to PDF)"
      private: no
      default: "Microsoft Print to PDF"

  tasks:

    - name: Check if Printer Exists
      win_shell: |
        $printer = Get-Printer -Name "{{ printer_name }}" -ErrorAction SilentlyContinue
        if ($printer) { Write-Output "Exists" } else { Write-Output "NotExists" }
      register: printer_status

    - name: Set Printer Exists Fact
      set_fact:
        printer_exists: "{{ 'Exists' in printer_status.stdout }}"

    - name: Get Existing Printer Ports
      win_shell: Get-PrinterPort | Select-Object -ExpandProperty Name
      register: printer_ports

    - name: Set Port Exists Fact
      set_fact:
        port_exists: "{{ printer_ip in printer_ports.stdout_lines }}"

    - name: Add Printer Port if Not Exists
      win_shell: Add-PrinterPort -Name "{{ printer_ip }}" -PrinterHostAddress "{{ printer_ip }}"
      when: not port_exists
      register: port_add_result

    - name: ‚úÖ Printer Port Added
      debug:
        msg: "‚úÖ Printer port '{{ printer_ip }}' added successfully."
      when: not port_exists and port_add_result.rc == 0

    - name: ‚ö†Ô∏è Printer Port Already Exists
      debug:
        msg: "‚ö†Ô∏è Printer port '{{ printer_ip }}' already exists."
      when: port_exists

    - name: Add Printer if Not Exists
      win_shell: |
        Add-Printer -Name "{{ printer_name }}" -PortName "{{ printer_ip }}" -DriverName "{{ printer_driver_name }}"
      when: not printer_exists
      register: printer_add_result
      ignore_errors: true

    - name: ‚úÖ Printer Added
      debug:
        msg: "‚úÖ Printer '{{ printer_name }}' added successfully with driver '{{ printer_driver_name }}'."
      when: not printer_exists and printer_add_result.rc == 0

    - name: ‚ö†Ô∏è Printer Already Exists
      debug:
        msg: "‚ö†Ô∏è Printer '{{ printer_name }}' already exists. Skipping add."
      when: printer_exists

    - name: Set Default Printer
      win_shell: |
        $printer = Get-Printer -Name "{{ printer_name }}" -ErrorAction SilentlyContinue
        if ($printer) {
          (New-Object -ComObject WScript.Network).SetDefaultPrinter("{{ printer_name }}")
          Write-Output "‚úÖ Default printer set to '{{ printer_name }}'"
        }
      register: default_set
      ignore_errors: true

    - name: ‚úÖ Default Printer Set
      debug:
        msg: "{{ default_set.stdout }}"
      when: default_set.stdout is defined and default_set.stdout != ""

    # ‚úÖ Stuck Print Job Handling

    - name: üîç Identify Stuck Print Jobs
      win_shell: |
        Get-PrintJob -PrinterName "{{ printer_name }}" | Where-Object { $_.JobStatus -match "Error|Printing" } |
        Select-Object ID, Name, Document, JobStatus, SubmittedTime | ConvertTo-Json -Depth 2
      register: stuck_jobs

    - name: üíæ Save Stuck Print Jobs to File
      win_copy:
        content: "{{ stuck_jobs.stdout }}"
        dest: "C:\\Temp\\stuck_print_jobs_{{ printer_name }}.json"
      when: stuck_jobs.stdout != ""

    - name: üßπ Clear Only Stuck Print Jobs
      win_shell: |
        Get-PrintJob -PrinterName "{{ printer_name }}" | Where-Object { $_.JobStatus -match "Error|Printing" } |
        Remove-PrintJob
      when: stuck_jobs.stdout != ""
      register: clear_stuck

    - name: ‚úÖ Stuck Print Jobs Cleared
      debug:
        msg: "‚úÖ Stuck print jobs for '{{ printer_name }}' were cleared and saved to C:\\Temp\\stuck_print_jobs_{{ printer_name }}.json."
      when: clear_stuck.rc == 0 and stuck_jobs.stdout != ""

    - name: Restart Print Spooler Service
      win_shell: Restart-Service Spooler
      register: spooler_restart
      ignore_errors: yes

    - name: üîÑ Spooler Restarted
      debug:
        msg: "üîÑ Print Spooler service restarted successfully."
      when: spooler_restart.rc == 0
