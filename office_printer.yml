- name: Office Printer Automation - Stable Version
  hosts: windows_host
  gather_facts: no

  vars:
    printer_name: "OfficePrinter1"
    printer_ip: "192.168.1.50"  # You can update this as needed
    printer_driver_name: "Microsoft Print to PDF"  # Use a pre-installed, reliable driver

  tasks:

    # 1Ô∏è‚É£ Ensure connected to Wi-Fi (optional check)
    - name: Get Wi-Fi Connection Details
      win_shell: |
        (Get-NetAdapter -InterfaceDescription "*Wireless*").InterfaceAlias
      register: wifi_status
      ignore_errors: yes

    - name: Debug - Show Wi-Fi Connection Status
      debug:
        msg: "üîç Wi-Fi Connected: {{ wifi_status.stdout }}"
      when: wifi_status.stdout | length > 0

    # 2Ô∏è‚É£ List Printer Ports and Check
    - name: Get Existing Printer Ports
      win_shell: Get-PrinterPort | Select-Object -ExpandProperty Name
      register: printer_ports

    - name: Check if Printer Port Already Exists
      set_fact:
        port_exists: "{{ printer_ip in printer_ports.stdout_lines }}"

    - name: Add Printer Port if Not Exists
      win_shell: |
        Add-PrinterPort -Name "{{ printer_ip }}" -PrinterHostAddress "{{ printer_ip }}"
      when: not port_exists

    # 3Ô∏è‚É£ Install Printer Using Existing Driver
    - name: Add Printer
      win_shell: |
        Add-Printer -Name "{{ printer_name }}" -PortName "{{ printer_ip }}" -DriverName "{{ printer_driver_name }}"
      register: printer_add_result
      ignore_errors: yes

    - name: Debug - Printer Installation Result
      debug:
        var: printer_add_result.stdout

    # 4Ô∏è‚É£ Set the Printer as Default
    - name: Set Printer as Default
      win_shell: |
        $printer = Get-Printer -Name "{{ printer_name }}" -ErrorAction SilentlyContinue
        if ($printer) {
          (New-Object -ComObject WScript.Network).SetDefaultPrinter("{{ printer_name }}")
        }
      register: default_result
      ignore_errors: yes

    - name: Debug - Default Printer Result
      debug:
        var: default_result.stdout

    # 5Ô∏è‚É£ Check and Clear Stuck Print Jobs
    - name: Find Stuck Print Jobs
      win_shell: |
        Get-Printer | ForEach-Object {
          Get-PrintJob -PrinterName $_.Name | Where-Object { $_.JobStatus -match "Error" }
        }
      register: stuck_jobs
      ignore_errors: yes

    - name: Remove Stuck Print Jobs
      win_shell: |
        Get-Printer | ForEach-Object {
          Get-PrintJob -PrinterName $_.Name | Where-Object { $_.JobStatus -match "Error" } | ForEach-Object {
            Remove-PrintJob -PrinterName $_.Name -ID $_.ID
          }
        }
      when: stuck_jobs.stdout | length > 0

    - name: Save Stuck Print Jobs to File
      win_shell: |
        $path = "C:\\Users\\Public\\Documents\\FailedPrintJobs\\StuckJobs.xml"
        $jobs = Get-Printer | ForEach-Object {
          Get-PrintJob -PrinterName $_.Name | Where-Object { $_.JobStatus -match "Error" }
        }
        $jobs | Export-Clixml -Path $path
      when: stuck_jobs.stdout | length > 0

    - name: Debug - Stuck Jobs Cleared
      debug:
        msg: "üßπ Stuck print jobs removed and saved to C:\\Users\\Public\\Documents\\FailedPrintJobs\\StuckJobs.xml"

    # 6Ô∏è‚É£ Restart Print Spooler if Needed
    - name: Restart Print Spooler Service
      win_shell: Restart-Service Spooler
      register: spooler_restart
      ignore_errors: yes

    - name: Debug - Spooler Restarted
      debug:
        msg: "‚úÖ Print Spooler restarted successfully."
