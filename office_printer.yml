- name: Reusable Office Printer Setup with Stuck Job Export and Display
  hosts: windows_host
  gather_facts: no

  vars_prompt:
    - name: "printer_name"
      prompt: "Enter the printer name"
      private: no

    - name: "printer_ip"
      prompt: "Enter the printer IP address"
      private: no

    - name: "printer_driver_name"
      prompt: "Enter the printer driver name (default: Microsoft Print to PDF)"
      private: no
      default: "Microsoft Print to PDF"

  tasks:

    - name: Check if Printer Exists
      win_shell: |
        $printer = Get-Printer -Name "{{ printer_name }}" -ErrorAction SilentlyContinue
        if ($printer) { Write-Output "Exists" } else { Write-Output "NotExists" }
      register: printer_status

    - name: Set Printer Exists Fact
      set_fact:
        printer_exists: "{{ 'Exists' in printer_status.stdout }}"

    - name: Get Existing Printer Ports
      win_shell: Get-PrinterPort | Select-Object -ExpandProperty Name
      register: printer_ports

    - name: Set Port Exists Fact
      set_fact:
        port_exists: "{{ printer_ip in printer_ports.stdout_lines }}"

    - name: Add Printer Port if Not Exists
      win_shell: Add-PrinterPort -Name "{{ printer_ip }}" -PrinterHostAddress "{{ printer_ip }}"
      when: not port_exists
      register: port_add_result

    - name: ✅ Printer Port Added
      debug:
        msg: "✅ Printer port '{{ printer_ip }}' added successfully."
      when: not port_exists and port_add_result.rc == 0

    - name: ⚠️ Printer Port Already Exists
      debug:
        msg: "⚠️ Printer port '{{ printer_ip }}' already exists."
      when: port_exists

    - name: Add Printer if Not Exists
      win_shell: |
        Add-Printer -Name "{{ printer_name }}" -PortName "{{ printer_ip }}" -DriverName "{{ printer_driver_name }}"
      when: not printer_exists
      register: printer_add_result
      ignore_errors: true

    - name: ✅ Printer Added
      debug:
        msg: "✅ Printer '{{ printer_name }}' added successfully with driver '{{ printer_driver_name }}'."
      when: not printer_exists and printer_add_result.rc == 0

    - name: ⚠️ Printer Already Exists
      debug:
        msg: "⚠️ Printer '{{ printer_name }}' already exists. Skipping add."
      when: printer_exists

    - name: Set Default Printer
      win_shell: |
        $printer = Get-Printer -Name "{{ printer_name }}" -ErrorAction SilentlyContinue
        if ($printer) {
          (New-Object -ComObject WScript.Network).SetDefaultPrinter("{{ printer_name }}")
          Write-Output "✅ Default printer set to '{{ printer_name }}'"
        }
      register: default_set
      ignore_errors: true

    - name: ✅ Default Printer Set
      debug:
        msg: "{{ default_set.stdout }}"
      when: default_set.stdout is defined and default_set.stdout != ""

    - name: Restart Print Spooler Service
      win_shell: Restart-Service Spooler
      register: spooler_restart
      ignore_errors: yes

    - name: 🔄 Spooler Restarted
      debug:
        msg: "🔄 Print Spooler service restarted successfully."
      when: spooler_restart.rc == 0

    - name: 📋 Check for Stuck Print Jobs
      win_shell: |
        $printerName = "{{ printer_name }}"
        $jobs = Get-PrintJob -PrinterName $printerName | Where-Object { $_.JobStatus -like "*Error*" -or $_.JobStatus -like "*Blocked*" }
        if ($jobs) {
          Write-Output "Stuck"
        } else {
          Write-Output "Clear"
        }
      register: stuck_jobs

    - name: 💾 Save Stuck Print Job Details to File
      win_shell: |
        $printerName = "{{ printer_name }}"
        $outputFolder = "C:\\Temp"
        $outputFile = "stuck_print_jobs_${printerName}.json"
        $outputPath = Join-Path $outputFolder $outputFile

        if (!(Test-Path $outputFolder)) {
          New-Item -Path $outputFolder -ItemType Directory -Force
        }

        $jobs = Get-PrintJob -PrinterName $printerName | Where-Object { $_.JobStatus -like "*Error*" -or $_.JobStatus -like "*Blocked*" }
        if ($jobs) {
          $jobs | Select-Object ID, Document, SubmittedBy, JobSize, PagesPrinted, JobStatus, TimeSubmitted | ConvertTo-Json | Out-File $outputPath -Encoding UTF8
          Write-Output "SavedPath:$outputPath"
        } else {
          Write-Output "NoStuckJobs"
        }
      when: "'Stuck' in stuck_jobs.stdout"
      register: stuck_job_export
      ignore_errors: true

    - name: 📁 Show Path to Exported Stuck Jobs File
      debug:
        msg: >
          {% if 'SavedPath:' in stuck_job_export.stdout %}
          💾 Stuck job details saved to: {{ stuck_job_export.stdout | regex_replace('SavedPath:', '') }}
          {% else %}
          ℹ️ No stuck print jobs found to export.
          {% endif %}
      when: stuck_job_export.stdout is defined

    - name: 📂 Read and Display Exported Stuck Print Job Details
      win_shell: |
        $path = "C:\\Temp\\stuck_print_jobs_{{ printer_name }}.json"
        if (Test-Path $path) {
          Get-Content $path -Raw
        } else {
          Write-Output "No file found at $path"
        }
      register: stuck_job_file_contents
      when: stuck_job_export.stdout is defined and "'SavedPath:' in stuck_job_export.stdout"

    - name: 📄 Show Stuck Print Job Contents
      debug:
        msg: "{{ stuck_job_file_contents.stdout }}"
      when: stuck_job_file_contents.stdout is defined and stuck_job_file_contents.stdout != ""

    - name: 🗑️ Clear Stuck Print Jobs
      win_shell: |
        $printerName = "{{ printer_name }}"
        Get-PrintJob -PrinterName $printerName | Where-Object { $_.JobStatus -like "*Error*" -or $_.JobStatus -like "*Blocked*" } | Remove-PrintJob -Confirm:$false
        Write-Output "Cleared stuck jobs on '{{ printer_name }}'"
      when: "'Stuck' in stuck_jobs.stdout"
      register: clear_stuck_jobs
      ignore_errors: true

    - name: ✅ Stuck Print Jobs Cleared
      debug:
        msg: "{{ clear_stuck_jobs.stdout }}"
      when: clear_stuck_jobs.stdout is defined and clear_stuck_jobs.stdout != ""
