- name: Office Printer Automation - Stable and Final Version
  hosts: windows_host
  gather_facts: no

  vars:
    printer_name: "OfficePrinter1"
    printer_ip: "192.168.1.50"  # Change as needed
    printer_driver_name: "Microsoft Print to PDF"

  tasks:

    - name: Check if Printer Already Exists
      win_shell: |
        $printer = Get-Printer -Name "{{ printer_name }}" -ErrorAction SilentlyContinue
        if ($printer) { Write-Output "Exists" } else { Write-Output "NotExists" }
      register: printer_status

    - name: Set Fact - Printer Exists
      set_fact:
        printer_exists: "{{ 'Exists' in printer_status.stdout }}"

    - name: Get Existing Printer Ports
      win_shell: Get-PrinterPort | Select-Object -ExpandProperty Name
      register: printer_ports

    - name: Check if Printer Port Already Exists
      set_fact:
        port_exists: "{{ printer_ip in printer_ports.stdout_lines }}"

    - name: Add Printer Port if Not Exists
      win_shell: |
        Add-PrinterPort -Name "{{ printer_ip }}" -PrinterHostAddress "{{ printer_ip }}"
      when: not port_exists

    - name: Add Printer if Not Exists
      win_shell: |
        Add-Printer -Name "{{ printer_name }}" -PortName "{{ printer_ip }}" -DriverName "{{ printer_driver_name }}"
      when: not printer_exists
      register: printer_add_result
      ignore_errors: yes

    - name: Debug - Printer Installation Output
      debug:
        var: printer_add_result.stdout_lines
      when: not printer_exists

    - name: Set Default Printer
      win_shell: |
        $printer = Get-Printer -Name "{{ printer_name }}" -ErrorAction SilentlyContinue
        if ($printer) {
          (New-Object -ComObject WScript.Network).SetDefaultPrinter("{{ printer_name }}")
        }
      register: default_set
      ignore_errors: yes

    - name: Debug - Default Printer Result
      debug:
        var: default_set.stdout

    - name: Check for Stuck Print Jobs
      win_shell: |
        Get-Printer | ForEach-Object {
          Get-PrintJob -PrinterName $_.Name | Where-Object { $_.JobStatus -match "Error" }
        }
      register: stuck_jobs
      ignore_errors: yes

    - name: Remove Stuck Print Jobs
      win_shell: |
        Get-Printer | ForEach-Object {
          Get-PrintJob -PrinterName $_.Name | Where-Object { $_.JobStatus -match "Error" } | ForEach-Object {
            Remove-PrintJob -PrinterName $_.Name -ID $_.ID
          }
        }
      when: stuck_jobs.stdout | length > 0

    - name: Restart Print Spooler Service
      win_shell: Restart-Service Spooler
      register: spooler_restart
      ignore_errors: yes

    - name: Debug - Spooler Restarted
      debug:
        msg: "âœ… Print Spooler restarted successfully."
