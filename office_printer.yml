- name: Office Printer Automation
  hosts: windows_host
  gather_facts: no

  vars:
    printer_name: "OfficePrinter1"
    printer_ip: "192.168.1.50"  # Replace with default IP or update via set_fact

  tasks:

    # 1️⃣ Check if the user is connected to secure Wi-Fi
    - name: Get Wi-Fi Connection Details
      win_shell: |
        (Get-NetAdapter -InterfaceDescription "*Wireless*").InterfaceAlias
      register: wifi_status
      ignore_errors: yes

    - name: Debug - Show Wi-Fi Connection Status
      debug:
        msg: "🔍 User is connected to Wi-Fi: {{ wifi_status.stdout }}"
      when: wifi_status.stdout | length > 0

    # 2️⃣ Check if printer IP is in configured ports
    - name: Get Printer Ports
      win_shell: |
        Get-PrinterPort | Select-Object -ExpandProperty Name
      register: printer_ports

    - name: Debug - Check Printer IP in Ports
      debug:
        msg: "✅ Printer IP {{ printer_ip }} is found in configured ports."
      when: printer_ip in printer_ports.stdout_lines

    # 3️⃣ Update Printer and Drivers
    - name: List Installed Drivers
      win_shell: |
        pnputil /enum-drivers
      register: installed_drivers

    - name: Debug - Show Installed Drivers
      debug:
        msg: "{{ installed_drivers.stdout_lines }}"

    - name: Remove Old Printer Drivers
      win_shell: |
        Get-PrinterDriver | ForEach-Object {
          pnputil /delete-driver "$($_.Name)" /force
        }
      register: driver_removal_result
      ignore_errors: yes

    - name: Install Printer Driver Again
      win_shell: |
        pnputil /add-driver "C:\Path\To\Driver.inf" /install
      register: driver_install_result
      ignore_errors: yes

    - name: Debug - Printer Drivers Reinstalled
      debug:
        msg: "📢 Printer drivers reinstalled successfully."

    # 4️⃣ Install the printer using IP and driver
    - name: Add Printer with IP
      win_shell: |
        Add-Printer -Name "{{ printer_name }}" -PortName "{{ printer_ip }}" -DriverName "Generic / Text Only"
      register: printer_install_result
      ignore_errors: yes

    - name: Debug - Printer Setup Status
      debug:
        msg: "🖨️ Printer '{{ printer_name }}' has been set up successfully with IP: {{ printer_ip }}"
      when: printer_install_result is succeeded

    # 5️⃣ Set Default Printer
    - name: Get Default Printer
      win_shell: |
        (Get-Printer | Where-Object { $_.IsDefault -eq $true }).Name
      register: default_printer

    - name: Set Printer as Default if Not Already
      win_shell: |
        Set-DefaultPrinter -Name "{{ printer_name }}"
      when: printer_name not in default_printer.stdout

    - name: Debug - Printer Default Status
      debug:
        msg: "✅ Printer '{{ printer_name }}' is set as the default printer."

    # 6️⃣ Remove Stuck Print Jobs and Save to File
    - name: Find Stuck Print Jobs
      win_shell: |
        Get-Printer | ForEach-Object {
          Get-PrintJob -PrinterName $_.Name | Where-Object { $_.JobStatus -match "Error" }
        }
      register: stuck_jobs

    - name: Remove Stuck Print Jobs
      win_shell: |
        Get-Printer | ForEach-Object {
          Get-PrintJob -PrinterName $_.Name | Where-Object { $_.JobStatus -match "Error" } | ForEach-Object {
            Remove-PrintJob -PrinterName $_.Name -ID $_.ID
          }
        }
      when: stuck_jobs.stdout | length > 0

    - name: Save Stuck Print Jobs to File
      win_shell: |
        $outputPath = "C:\\Users\\Public\\Documents\\FailedPrintJobs\\StuckJobs.xml"
        $stuckJobs = Get-Printer | ForEach-Object {
          Get-PrintJob -PrinterName $_.Name | Where-Object { $_.JobStatus -match "Error" }
        }
        $stuckJobs | Export-Clixml -Path $outputPath
      when: stuck_jobs.stdout | length > 0

    - name: Debug - Stuck Jobs Cleared and Saved
      debug:
        msg: "🚀 Stuck print jobs removed and stored at C:\\Users\\Public\\Documents\\FailedPrintJobs\\StuckJobs.xml"

    # 7️⃣ Ensure Printer is Online
    - name: Get Printer Online Status
      win_shell: |
        (Get-Printer -Name "{{ printer_name }}").PrinterStatus
      register: printer_status

    - name: Bring Printer Online
      win_shell: |
        Restart-Service Spooler
      when: "'Offline' in printer_status.stdout"

    - name: Debug - Printer Online Status
      debug:
        msg: "✅ Printer '{{ printer_name }}' is now online."
      when: "'Offline' not in printer_status.stdout"
