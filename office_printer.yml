- name: Office Printer Automation
  hosts: windows_host
  gather_facts: no

  vars:
    printer_name: ""  # To be set dynamically
    printer_ip: ""    # To be set dynamically

  tasks:

    # 1️⃣ Check if the user is connected to secure Wi-Fi
    - name: Get Wi-Fi Connection Details
      win_shell: |
        (Get-NetAdapter -InterfaceDescription "*Wireless*").InterfaceAlias
      register: wifi_status
      ignore_errors: yes

    - name: Debug - Show Wi-Fi Connection Status
      debug:
        msg: "🔍 User is connected to Wi-Fi: {{ wifi_status.stdout }}"
      when: wifi_status.stdout | length > 0

    # 2️⃣ Check if printer IP is in configured ports
    - name: Get Printer Ports
      win_shell: |
        Get-PrinterPort | Select-Object -ExpandProperty Name
      register: printer_ports

    - name: Debug - Check Printer IP in Ports
      debug:
        msg: "✅ Printer IP {{ printer_ip }} is found in configured ports."
      when: printer_ip in printer_ports.stdout_lines

    - name: Prompt for Printer IP if Not Found
      pause:
        prompt: "❌ Printer IP not found in ports. Please enter the printer IP manually:"
      register: manual_printer_ip
      when: printer_ip not in printer_ports.stdout_lines

    - name: Set Printer IP from Manual Input
      set_fact:
        printer_ip: "{{ manual_printer_ip.user_input }}"
      when: manual_printer_ip.user_input is defined

    # 3️⃣ Update Printer and Drivers
    - name: Update Printer and Drivers
      block:
        - name: Detect Installed Printer Drivers
          win_shell: |
            (Get-PrinterDriver | Select-Object -ExpandProperty Name) -join ', '
          register: installed_printer_driver

        - name: Debug - Show Installed Printer Drivers
          debug:
            msg: "🔍 Installed Printer Driver(s): {{ installed_printer_driver.stdout }}"

        - name: Update Printer Drivers
          win_shell: |
            pnputil /enum-drivers | Select-String "Published Name"
            pnputil /scan-devices
          register: driver_update_result

        - name: Debug - Printer Drivers Updated
          debug:
            msg: "📢 Printer drivers updated successfully."
          when: driver_update_result is succeeded

        - name: Check Printer Firmware Version
          win_shell: |
            (Get-Printer -Name "{{ printer_name }}").DriverVersion
          register: printer_firmware

        - name: Debug - Show Printer Firmware
          debug:
            msg: "🔍 Current Printer Firmware Version: {{ printer_firmware.stdout }}"

    # 4️⃣ Install the printer using IP and driver
    - name: Add Printer with IP
      win_shell: |
        Add-Printer -Name "{{ printer_name }}" -PortName "{{ printer_ip }}" -DriverName "{{ installed_printer_driver.stdout }}"
      register: printer_install_result

    - name: Debug - Printer Setup Status
      debug:
        msg: "🖨️ Printer '{{ printer_name }}' has been set up successfully with IP: {{ printer_ip }}"
      when: printer_install_result is succeeded

    # 5️⃣ Check if printer is set as default
    - name: Get Default Printer
      win_shell: |
        (Get-Printer | Where-Object { $_.IsDefault -eq $true }).Name
      register: default_printer

    - name: Set Printer as Default if Not Already
      win_shell: |
        Set-Printer -Name "{{ printer_name }}" -IsDefault $true
      when: printer_name not in default_printer.stdout

    - name: Debug - Printer Default Status
      debug:
        msg: "✅ Printer '{{ printer_name }}' is set as the default printer."

    # 6️⃣ Remove Stuck Print Jobs and Download Files
    - name: Find Stuck Print Jobs
      win_shell: |
        Get-Printer | ForEach-Object { 
          Get-PrintJob -PrinterName $_.Name | Where-Object { $_.JobStatus -match "Error" }
        }
      register: stuck_jobs

    - name: Remove Stuck Print Jobs
      win_shell: |
        Get-Printer | ForEach-Object { 
          Get-PrintJob -PrinterName $_.Name | Where-Object { $_.JobStatus -match "Error" } | ForEach-Object { 
            Remove-PrintJob -PrinterName $_.Name -ID $_.ID 
          } 
        }
      when: stuck_jobs.stdout | length > 0

    - name: Save Stuck Print Jobs to File
      win_shell: |
        $outputPath = "C:\\Users\\Public\\Documents\\FailedPrintJobs\\StuckJobs.xml"
        $stuckJobs = Get-Printer | ForEach-Object { 
          Get-PrintJob -PrinterName $_.Name | Where-Object { $_.JobStatus -match "Error" }
        }
        $stuckJobs | Export-Clixml -Path $outputPath
      when: stuck_jobs.stdout | length > 0

    - name: Debug - Stuck Jobs Cleared and Saved
      debug:
        msg: "🚀 Stuck print jobs removed and stored at C:\\Users\\Public\\Documents\\FailedPrintJobs\\StuckJobs.xml"

    # 7️⃣ Ensure Printer is Online
    - name: Get Printer Online Status
      win_shell: |
        (Get-Printer -Name "{{ printer_name }}").PrinterStatus
      register: printer_status

    - name: Bring Printer Online
      win_shell: |
        Restart-Service Spooler
      when: "'Offline' in printer_status.stdout"

    - name: Debug - Printer Online Status
      debug:
        msg: "✅ Printer '{{ printer_name }}' is now online."
      when: "'Offline' not in printer_status.stdout"
