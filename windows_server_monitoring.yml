- name: Manage Windows Server Tasks
  hosts: winserverhost
  gather_facts: no

  vars:
    remote_log_path: "C:\\logs\\app.log"

  tasks:
    - name: Fetch latest 50 log entries from Windows server
      win_shell: |
        $logContent = Get-Content "{{ remote_log_path }}" -Tail 50
        if (-not $logContent) { "Log file is empty or no new entries found." } else { $logContent }
      register: log_output

    - name: Display logs
      debug:
        msg: "{{ log_output.stdout_lines | default(['No logs retrieved.']) }}"

    - name: Check high CPU and memory usage processes
      win_shell: |
        $cpuProcesses = Get-Process | Sort-Object -Descending CPU | Select-Object -First 5 Name,CPU,Id
        $memProcesses = Get-Process | Sort-Object -Descending WorkingSet | Select-Object -First 5 Name,@{Name="WS_MB"; Expression={[math]::Round($_.WorkingSet / 1MB, 2)}},Id
        $highestCPU = $cpuProcesses | Select-Object -First 1

        @("High CPU Usage Processes (Top 5):") + ($cpuProcesses | Format-Table -AutoSize | Out-String) +
        @("High Memory Usage Processes (Top 5) in MB:") + ($memProcesses | Format-Table -AutoSize | Out-String) +
        @("Process with highest CPU: " + $highestCPU.Name + " (CPU: " + $highestCPU.CPU + ")")
      register: process_output

    - name: Display high CPU and memory consuming processes
      debug:
        msg: "{{ process_output.stdout_lines }}"

    - name: Check disk utilization in human-readable format
      win_shell: |
        Get-WmiObject Win32_LogicalDisk | Select-Object DeviceID, 
        @{Name="TotalSize_MB"; Expression={[math]::Round($_.Size / 1MB, 2)}}, 
        @{Name="FreeSpace_MB"; Expression={[math]::Round($_.FreeSpace / 1MB, 2)}} | 
        Format-Table -AutoSize | Out-String
      register: disk_usage

    - name: Display disk usage
      debug:
        msg: "{{ disk_usage.stdout_lines }}"

    - name: Kill the highest CPU utilization process
      win_shell: |
        $highestCPU = (Get-Process | Sort-Object -Descending CPU | Select-Object -First 1)
        if ($highestCPU) { 
          Stop-Process -Id $highestCPU.Id -Force
          "Process " + $highestCPU.Name + " (CPU: " + $highestCPU.CPU + ") stopped successfully."
        } else {
          "No high CPU process found."
        }
      register: kill_process_output
      ignore_errors: yes

    - name: Display process kill result
      debug:
        msg: "{{ kill_process_output.stdout_lines }}"
