- name: Manage Windows Server Tasks
  hosts: winserverhost
  gather_facts: no

  vars:
    remote_log_path: "C:\\logs\\app.log"  # Ensure this is set in AWX Inventory
    retrieved_log_path: "C:\\logs\\fetched_logs.txt"
    process_to_kill: "abc"  # Example process

  tasks:
    - name: Debug remote_log_path variable
      debug:
        msg: "Log file path: {{ remote_log_path }}"

    - name: Ensure remote_log_path is defined
      fail:
        msg: "Variable remote_log_path is not defined!"
      when: remote_log_path is not defined

    - name: Fetch log file from Windows server
      win_shell: |
        $logContent = Get-Content "{{ remote_log_path }}" -Tail 50
        if (-not $logContent) {
          Write-Output "Log file is empty or no new entries found."
        } else {
          $logContent
        }
      register: log_output

    - name: Display scraped logs
      debug:
        msg: "{{ log_output.stdout_lines }}"

    - name: Display scraped logs
      debug:
        msg: "{{ log_output.stdout_lines | default(['No logs retrieved.']) }}"

    - name: Check high CPU and memory usage processes
      win_shell: |
        Get-Process | Sort-Object -Descending CPU | Select-Object -First 5 Name,CPU,Id
      register: process_output

    - name: Display high resource-consuming processes
      debug:
        msg: "{{ process_output.stdout_lines }}"

    - name: Check disk utilization
      win_shell: "Get-PSDrive C | Select-Object Used,Free,UsedPercent"
      register: disk_usage

    - name: Display disk usage
      debug:
        msg: "{{ disk_usage.stdout_lines }}"

    - name: Kill a process if running
      win_shell: |
       $process = Get-Process -Name '{{ process_to_kill }}' -ErrorAction SilentlyContinue
       if ($process) { 
         Stop-Process -Name '{{ process_to_kill }}' -Force
         Write-Output "Process {{ process_to_kill }} stopped successfully."
       } else {
         Write-Output "Process {{ process_to_kill }} not found."
       }
      register: kill_process_output
      ignore_errors: yes

    - name: Display process kill result
      debug:
        msg: "{{ kill_process_output.stdout_lines }}"
