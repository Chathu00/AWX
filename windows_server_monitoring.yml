---
- name: Windows Server Monitoring & Management
  hosts: windows
  gather_facts: no
  tasks:

    - name: Fetch Log File
      win_shell: Get-Content C:\logs\app.log -Tail 10
      register: log_output

    - name: Save Log Output
      copy:
        content: "{{ log_output.stdout }}"
        dest: "./fetched_logs.txt"
      delegate_to: localhost

    - name: Scrape Logs for Specific Time Range
      win_shell: |
        $start_time = Get-Date "02/01/2025 10:00"
        $end_time = Get-Date "02/02/2025 12:00"
        Get-EventLog -LogName Application | Where-Object { $_.TimeGenerated -ge $start_time -and $_.TimeGenerated -le $end_time } | Select-Object -First 10
      register: scraped_logs

    - name: Save Scraped Logs
      copy:
        content: "{{ scraped_logs.stdout }}"
        dest: "./scraped_logs.txt"
      delegate_to: localhost

    - name: Check High CPU Usage
      win_shell: Get-Process | Sort-Object -Descending CPU | Select-Object -First 10 Name,CPU,Id
      register: high_cpu_processes

    - name: Check High Memory Usage
      win_shell: Get-Process | Sort-Object -Descending WS | Select-Object -First 10 Name,WS,Id
      register: high_memory_processes

    - name: Save CPU & Memory Usage Details
      copy:
        content: |
          Top 10 CPU-consuming processes:
          {{ high_cpu_processes.stdout }}

          Top 10 Memory-consuming processes:
          {{ high_memory_processes.stdout }}
        dest: "./process_usage.txt"
      delegate_to: localhost

    - name: Check Disk Utilization
      win_shell: Get-PSDrive C | Select-Object Used, Free
      register: disk_utilization

    - name: Save Disk Utilization Details
      copy:
        content: "{{ disk_utilization.stdout }}"
        dest: "./disk_utilization.txt"
      delegate_to: localhost

    - name: Kill a Process (Optional)
      win_shell: Stop-Process -Id {{ process_id }} -Force
      when: process_id is defined
      register: kill_result
      ignore_errors: yes

    - name: Show Process Termination Result
      debug:
        msg: "{{ kill_result.stdout | default('Process termination failed or skipped') }}"
      when: process_id is defined
